/******************************************************************************
invest.js - Beat the Market - time the market to beat dollar cost average index fund.
Copyright 2021, Gary Strawn - Copy it, change it, use it however you'd like.
                              It's free as long as you don't claim it's yours.
A gift for my kids so hopefully they learn to stay away from market timing.
******************************************************************************/
// ==ClosureCompiler==
// @compilation_level SIMPLE_OPTIMIZATIONS
// @output_file_name invest.min.js
// ==/ClosureCompiler==

//---------------------------------------------------------------------------
//PriceStr - long-hand price formatter;  Ex: 2500 => $2,500.00
function PriceStr(x) {
	return new Intl.NumberFormat('en-US', 
		{style:'currency', currency:'USD', minimumFractionDigits:2}).format(x);
} //PriceStr


//-----------------------------------------------------------------------------
//UpdateStash - update Emergency Stash total
function UpdateStash() {
	var total = 0;
	document.querySelectorAll('#stash input').forEach(i => { if(i.id != 'stash_months')  total += Number(i.value); });
	total *= document.getElementById('stash_months').value;
	document.getElementById('stash_total').textContent = new Intl.NumberFormat('en-US', 
			{style:'currency', currency:'USD', minimumFractionDigits:0}).format(total);
(total);
} //UpdateStash


//-----------------------------------------------------------------------------
//UpdateCompound - update totals in Compount Interest Calculator
function UpdateCompound() {
	const starting = Number(document.getElementById('comp_starting').value);
	const contrib = Number(document.getElementById('comp_contrib').value);
	const rate = Number(document.getElementById('comp_rate').value);
	const years = Number(document.getElementById('comp_years').value);

	const r = rate / 100 / 12;
	const n = years * 12;
	var balance = (starting * Math.pow(1+r, n))
				+ (contrib * (Math.pow(1+r, n) - 1) / r);

	const principal = contrib * n;
	const interest = balance - principal;
	document.getElementById('comp_principal').textContent = PriceStr(principal);
	document.getElementById('comp_interest').textContent = PriceStr(interest);
	document.getElementById('comp_ending').textContent = PriceStr(balance);
} //UpdateCompound


//market data
const g_nMkt = 30*52*5; //length of game = 30 years * 52 weeks/year * 5 days/week
var g_iMkt = 0;   //current day (index into g_aMkt)
var g_aMkt = [1]; //30 years of stock market data (always positive, never zero)

//player totals
var g_bnk = 0; //player's bank balance (dollars)
var g_mkt = 0; //player's #shares in market
var g_avg = 0; //Mr. Avg's #shares in market
var g_principal = 0; //total contributions to date

//market scale
var g_xScale = 1; //graph time scale (6 months, 1 year, 2 years, 5 years)
var g_yScale = 1; //graph price scale
var g_mktMin = 1; //lowest visible market values (used for y-zoom)
var g_mktMax = 1; //highest visible market values (used for y-zoom)
var g_mktMid = 1; //mid-point of visible market values (used for y-translate)

var g_uid = 0; //unique user ID (generated by server)
var g_mktInterval = 0; //update timer (200ms/day = 5 days/s = 4.3s/month = 26 minutes for 30 years


//-----------------------------------------------------------------------------
//BuySell - a buy/sell button was pressed
// amt - >0 = buy, <0 = sell
function BuySell(amt) {
	if(g_bnk - amt <= 0.5) { //0.5 = epsilon = avoid floating-point imprecision
		//buy all (empty the bank)
		g_mkt += g_bnk / g_aMkt[g_iMkt];
		g_bnk = 0;
	} else if((g_mkt * g_aMkt[g_iMkt]) + amt <= 0.5) {
		//sell all
		g_bnk += g_mkt * g_aMkt[g_iMkt];
		g_mkt = 0;
	} else {
		//buy/sell specified amount
		g_bnk -= amt;
		g_mkt += amt / g_aMkt[g_iMkt];
	}
	PaintMarket();
} //Buy
function Buy(amt=1000)   { BuySell(amt); }
function BuyAll()        { BuySell(g_bnk); }
function Sell(amt=1000)  { BuySell(-amt); }
function SellAll()       { BuySell(-(g_mkt * g_aMkt[g_iMkt])); }

//---------------------------------------------------------------------------
//MktMoneyStr - short-hand money formatter;  Ex: 2500 => $3k
function MktMoneyStr(x) {
	return new Intl.NumberFormat('en-US', 
		{style:'currency', currency:'USD', minimumFractionDigits:0, maximumFractionDigits:0}).format(x);
} //MktMoneyStr


//---------------------------------------------------------------------------
//MktGainStr - convert float to percentage
function MktGainStr(x) {
	return new Intl.NumberFormat('en-US', {style:'percent', signDisplay:'exceptZero', 
		minimumFractionDigits:((x < 100) ? 1 : 0), maximumFractionDigits:((x < 100) ? 1 : 0)}).format(x);
} //MktGainStr

//-----------------------------------------------------------------------------
//ZoomMarket - adjust zoom: 6 months, 1 year, 2 years, 5 years
function ZoomMarket() {
	//scale x-axis according to zoom level
	const zoomBtn = document.querySelector("input[name=zoom]:checked");
	g_xScale = zoomBtn  ?  Number(zoomBtn.value)  :  1;  //default = 1 = no radio button selected

	//snap g_mktMin, g_mktMax & g_mktMid; no smooth transition
	const width = document.getElementById('mktGraph').width / g_xScale;
	var iMkt = (g_iMkt > width)  ?  (g_iMkt - width) : 0; //start at oldest date shown
	g_mktMin = g_mktMax = g_aMkt[g_iMkt]; //reset y-zoom
	for(let i = iMkt+1;  i <= g_iMkt;  i++) {
		if(     g_aMkt[i] < g_mktMin)  g_mktMin = g_aMkt[i];
		else if(g_aMkt[i] > g_mktMax)  g_mktMax = g_aMkt[i];
	}
	g_mktMid = ((g_mktMax - g_mktMin) / 2) + g_mktMin; //mid-line
} //ZoomMarket


//-----------------------------------------------------------------------------
//PaintMarket - adjust dollars, enable/disable buttons, redraw graph
function PaintMarket() {
	//account balances
	document.getElementById('youBnk').textContent = MktMoneyStr(g_bnk);
	document.getElementById('youMkt').textContent = MktMoneyStr(g_mkt*g_aMkt[g_iMkt]);
	document.getElementById('youTtl').textContent = MktMoneyStr(g_bnk + g_mkt*g_aMkt[g_iMkt]);
	document.getElementById('avgMkt').textContent = 
	document.getElementById('avgTtl').textContent = MktMoneyStr(g_avg*g_aMkt[g_iMkt]);
	document.getElementById('mktPrincipal').textContent = MktMoneyStr(g_principal);

	//gains
	let youGain=0, avgGain=0;
	if(g_principal > 0) {
		youGain = ((g_bnk + g_mkt*g_aMkt[g_iMkt]) - g_principal) / g_principal;
		avgGain = (        (g_avg*g_aMkt[g_iMkt]) - g_principal) / g_principal;
	}
	document.getElementById('youGain').textContent = MktGainStr(youGain);
	document.getElementById('youGain').style = "color:"+ ((youGain > 0) ? 'lime' : 'red');
	document.getElementById('avgGain').textContent = MktGainStr(avgGain);
	document.getElementById('avgGain').style = "color:"+ ((avgGain > 0) ? 'lime' : 'red');

	//enable/disable buy/sell buttons
	document.getElementById('buy').disabled = document.getElementById('buyall').disabled = (g_bnk <= 0);
	document.getElementById('sell').disabled = document.getElementById('sellall').disabled = (g_mkt <= 0);

	//show time elapsed
	let years = Math.floor(g_iMkt / (52*5));  //52 weeks/year * 5 days/week
	let months = Math.floor((g_iMkt % (52*5)) / (52*5/12));
	document.getElementById('mktElapsed').textContent = years +' years, '+ months +' months';

	//scale y-axis according to visible market price variance
	const elem = document.getElementById('mktGraph');
	var iMkt = (g_iMkt > elem.width/g_xScale)  ?  (g_iMkt - elem.width/g_xScale) : 0; //start at oldest date shown
	let min = g_aMkt[g_iMkt]; //lowest  visible price, start with current price
	let max = g_aMkt[g_iMkt]; //highest visible price, start with current price
	for(let i = iMkt+1;  i <= g_iMkt;  i++) {
		if(     g_aMkt[i] < min)  min = g_aMkt[i];
		else if(g_aMkt[i] > max)  max = g_aMkt[i];
	}
	//grow (zoom out) instantly, shrink (zoom in) slowly (10% / day)
	g_mktMin = (min <= g_mktMin)  ?  min  :  (g_mktMin + 0.1*(min - g_mktMin));
	g_mktMax = (max >= g_mktMax)  ?  max  :  (g_mktMax - 0.1*(g_mktMax - max));

	//translate up/down;  instant to keep new price in range, otherwise slow
	let mid = ((g_mktMax - g_mktMin) / 2) + g_mktMin; //mid-line
	if(g_aMkt[g_iMkt] == min  ||  g_aMkt[g_iMkt] == max) //if current price is at min or max
		g_mktMid = mid;  //move instantly
	else
		g_mktMid = g_mktMid + 0.1*(mid - g_mktMid);  //move slowly (10% / day)

	//show at least +/- 20% of current value (i.e. don't zoom in too far)
	if(g_mktMax - g_mktMin < g_mktMid * 0.40) {
		let diff = ((g_mktMid * 0.40) - (g_mktMax - g_mktMin)) / 2;
		g_mktMax += diff;
		g_mktMin -= diff;
	}

	//yScale (leave 10 pixel padding at top and bottom (20 pixels total))
	const yScale = -(elem.height-20) / (g_mktMax - g_mktMin); //assumes g_mktMax > g_mktMin
	const yHalf = elem.height / 2;

	const ctx = elem.getContext('2d');
	ctx.clearRect(0, 0, elem.width, elem.height);

	//vertical month lines
	ctx.strokeStyle = 'lightgrey';
	ctx.beginPath();
	for(let x=0;  x < elem.width;  x++) {
		if(Math.floor(((iMkt*g_xScale)+x) % (52*5/12 * g_xScale)) == 0) {
			ctx.moveTo(x, 0);
			ctx.lineTo(x, elem.height);
		}
	}
	ctx.stroke();

	//vertical year lines
	ctx.strokeStyle = 'darkgrey';
	ctx.beginPath();
	for(let x=0;  x < elem.width;  x++) {
		if(Math.floor(((iMkt*g_xScale)+x) % (52*5 * g_xScale)) == 0) {
			ctx.moveTo(x, 0);
			ctx.lineTo(x, elem.height);
		}
	}
	ctx.stroke();


	//horizontal current-price line
	const yCurr = ((g_aMkt[g_iMkt] - g_mktMid) * yScale) + yHalf;
	ctx.strokeStyle = 'dodgerblue';
	ctx.beginPath();
	ctx.moveTo(0, yCurr);  ctx.lineTo(elem.width, yCurr); //current price
	ctx.stroke();

	//horizontal percentage lines (every 10%)
	const percStep = (((g_mktMax - g_mktMin) / g_mktMin) > 1)  ?  20  :  10; //10% or 20%
	ctx.strokeStyle = (percStep == 10)  ?  'lightgreen'  :  'yellow';
	ctx.font = '12px sans-serif';
	ctx.beginPath();
	let iLine = 1;
	let yStep = Math.abs(g_aMkt[g_iMkt] * percStep/100 * yScale);
	for(let y = yStep; y < elem.height;  y += yStep) {
		ctx.moveTo(40, yCurr - y);  ctx.lineTo(elem.width, yCurr - y);
		ctx.moveTo(45, yCurr + y);  ctx.lineTo(elem.width, yCurr + y);
		ctx.fillText(Math.round(iLine*percStep) + '%', 10, yCurr-y+4);
		ctx.fillText('-'+ Math.round(iLine*percStep) +'%', 10, yCurr+y+4);
		iLine++;
	}
	ctx.stroke();

	//draw market graph
	let x = 0;
	ctx.strokeStyle = 'blue';
	ctx.beginPath();
	ctx.moveTo(-1, elem.height/2);
	for(let x = 0;  iMkt <= g_iMkt;  x += g_xScale)
		ctx.lineTo(x, ((g_aMkt[iMkt++] - g_mktMid) * yScale) + yHalf);
	ctx.stroke();

/*	//x *** DEBUG
	ctx.font = '20px sans-serif';
	ctx.fillText('$'+ g_aMkt[g_iMkt].toFixed(2) +'   @'+ g_iMkt, 0, 20); //current price
	ctx.fillText(g_mktMin.toFixed(2) +' - '+ g_mktMid.toFixed(2) +' - '+ g_mktMax.toFixed(2), 0, 40); //current range
*/
} //PaintMarket


//-----------------------------------------------------------------------------
//SendMarketScore - send current score to server
//Note: On final update SendMarketScore also calls UpdateMarketScores.
// This avoids race condition of server updating scores before final update is received.
function SendMarketScore() {
	const mkt = g_aMkt[(g_iMkt >= g_aMkt.length) ? (g_aMkt.length-1) : g_iMkt]; //current market price
	var youGain=0, avgGain=0;
	if(g_principal > 0) {
		youGain = ((g_bnk + g_mkt*mkt) - g_principal) / g_principal;
		avgGain =         ((g_avg*mkt) - g_principal) / g_principal;
	}

	const xhr = new XMLHttpRequest();
	const data = new FormData();
	data.set('uid', g_uid);
	data.set('day', g_iMkt);
	data.set('youCash', Math.round(g_bnk + g_mkt*mkt));
	data.set('avgCash', Math.round(g_avg*mkt));
	data.set('youGain', (youGain*100).toFixed(1));
	data.set('avgGain', (avgGain*100).toFixed(1));
	if(g_iMkt >= g_aMkt.length)  xhr.onload = UpdateMarketScores; //fetch new scores
	xhr.open('POST', '/content/invest/marketgame.php');
	xhr.send(data);
} //SendMarketScore


//-----------------------------------------------------------------------------
//UpdateMarket - process another month
function UpdateMarket() {
	g_iMkt++; //advance another week
	if(g_iMkt >= g_aMkt.length) { //if 30 years then game over
		clearInterval(g_mktInterval); //no more updates
		document.getElementById('mktElapsed').textContent = '30 years, game over.';
		document.getElementById('mktStart').textContent = 'Play Again';
		document.getElementById('mktOverlay').style.display = ''; //show 'Play Again'
		//Note: On final update SendMarketScore also calls UpdateMarketScores.
		// This avoids race condition of server updating scores before final update is received.
		SendMarketScore();
		InitMarket(); //fetch next data set
		return; //game over
	}

	//once per month
	if(Math.trunc(g_iMkt % (52*5/12)) == 0) {
		//add another thousand
		g_principal += 1000;
		g_bnk += 1000; //another $1k every month
		g_avg += 1000.0 / g_aMkt[g_iMkt]; //add more shares
		SendMarketScore();
	}
	PaintMarket();
} //UpdateMarket


//-----------------------------------------------------------------------------
//StartMarket - fetch 30-years of market data from server
function StartMarket() {
	if(!g_aMkt  ||  !g_aMkt.length) { //if error
		document.getElementById('mktOverlay').innerHTML = 
			'<span class="mktError">No market data.</span>';
		return;
	}
	document.getElementById('mktOverlay').style.display = "none"; //hide start overlay
	document.getElementById('mktName').textContent = (document.getElementById('mktName').value || 'You'); //name
	document.querySelectorAll('#market input[type=radio]').forEach(elem => elem.disabled = false); //enable zoom
	g_iMkt = 0;  //7800 = 30 years
	g_bnk = g_mkt = g_avg = g_principal = 0;
	g_mktMin = g_mktMax = g_mktMid = g_aMkt[0];
	g_mktInterval = setInterval(UpdateMarket, 200); //200ms/day = 5 days/s = 4.3s/month = 26 minutes for 30 years

	//start server records
	const xhr = new XMLHttpRequest();
	const data = new FormData();
	data.set('uid', g_uid);
	data.set('name', document.getElementById('mktName').value);
	xhr.open('POST', '/content/invest/marketgame.php');
	xhr.send(data);
} //StartMarket


//-----------------------------------------------------------------------------
//InitMarket - fetch 30-years of DJIA market data from server
function InitMarket() {
	//disable all buttons except Start
	document.querySelectorAll('#market button').forEach(elem => elem.disabled = (elem.id != 'mktStart'));
	document.querySelectorAll('#market input[type=radio]').forEach(elem => elem.disabled = true);

	//retrieve market data from server
	const xhr = new XMLHttpRequest();
	const data = new FormData();
	data.set('market', '');
	xhr.responseText = 'json';
	xhr.onload = function() {
		if(this.status == 200) {
			try { 
				const aResp = JSON.parse(this.response);
				g_uid = aResp['uid'];
				g_aMkt = aResp['aMkt'].map(x=>parseFloat(x));
			} catch {
				g_uid = 0;
				g_aMkt = [1]; //can never be zero
			}
		}
		if(!g_aMkt  ||  !g_aMkt.length  ||  !g_uid) { //if error
			//replace start overlay with error message
			document.getElementById('mktOverlay').innerHTML = 
					'<span class="mktError">Error loading market data.</span>';
		}
	} //onload
	xhr.open('POST', '/content/invest/marketgame.php');
	xhr.send(data);
} //InitMarket


//-----------------------------------------------------------------------------
//UpdateMarketScores - fetch 'Beat the Market' scores
function UpdateMarketScores() {
	const xhr = new XMLHttpRequest();
	const data = new FormData();
	data.set('scores', '');
	xhr.responseText = 'json';
	xhr.onload = function() {
		try {
			const aScores = JSON.parse(xhr.response);
			if(!aScores  ||  !aScores.length)  throw 0;

			const tbody = document.querySelector('#mktScores tbody');
			tbody.querySelectorAll('tr').forEach(tr => tr.remove()); //remove all old scores
		
			//add new scores
			aScores.forEach(score => {
				let tr = tbody.insertRow();
				score.forEach(txt => {
					let td = tr.insertCell();
					let node = document.createTextNode(txt);
					td.appendChild(node);
					if(txt[0] == '+')  td.classList.add('pos');
					if(txt[0] == '-')  td.classList.add('neg');
				});
			});
		} catch {
			console.log('Unable to display market scores.');
			document.getElementById('mktScores').style.display = 'none';
		}
	}; //onload
	xhr.open('POST', '/content/invest/marketgame.php');
	xhr.send(data);
} //UpdateMarketScores


//-----------------------------------------------------------------------------
//window.onload - initialize everything on this page
window.addEventListener("load", function() {
	//Emergency Stash Calculator
	document.querySelectorAll('#stash input').forEach(i => {
		i.addEventListener('input', UpdateStash)});
	UpdateStash();

	//Compound Interest Calculator
	document.querySelectorAll('#compound input').forEach(i => {
		i.addEventListener('input', UpdateCompound)});
	UpdateCompound();

	//Beat the Market game
	InitMarket(); //fetch market data
	PaintMarket(); //show graph lines
	UpdateMarketScores(); //show previous scores
}); //window.onload
